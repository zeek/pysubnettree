# Test that remove works with remove method or del statement, and removes
# by exact match.
#
# @TEST-EXEC: python3 %INPUT

from testsetup import testcase, ipv4binary, ipv6binary
import SubnetTree

def ipv4_func(ipstr):
    return ipstr

def ipv6_func(ipstr):
    return ipstr

def do_tests(binarymode):
    if binarymode:
        v4 = ipv4binary
        v6 = ipv6binary
    else:
        v4 = ipv4_func
        v6 = ipv6_func

    t = SubnetTree.SubnetTree(binarymode)
    t.insert("10.0.0.0/8")
    t.insert("10.1.99.99/16", "TenOne/16")
    t.insert("10.1.2.0/24")
    t.insert("11.1.0.0/16")

    # Verify that remove() works
    t.remove("10.0.0.0/8")
    testcase(v4("10.2.2.2") not in t, "lookup should fail")
    testcase(v4("10.1.3.3") in t, "lookup should succeed")
    testcase(v4("10.1.2.3") in t, "lookup should succeed")

    # Verify that "del" also works
    del t["10.1.0.0/16"]
    testcase(v4("10.1.3.3") not in t, "lookup should fail")
    testcase(v4("10.1.2.3") in t, "lookup should succeed")

    # Verify that lookups of removed elements fail as expected
    try:
        if t[v4("10.1.3.3")]:  pass
        testcase(False, "lookup of deleted element should throw exception")
    except KeyError:
        pass

    # Verify that removals fail when they are not an exact match
    try:
        t.remove("11.1.0.0/24")
        testcase(False, "removal should throw exception")
    except RuntimeError:
        pass

    try:
        del t["11.1.0.0/24"]
        testcase(False, "removal should throw exception")
    except RuntimeError:
        pass


    # Test IPv6
    t.insert("1:2:3:4::/64")
    t.insert("1:2:3:7::/64", "Network 1:2:3:7::/64")
    t.insert("1:2::/32", "Network 1:2::/32")

    t.remove("1:2::/32")
    testcase(v6("1:2:99::") not in t, "lookup should fail")
    testcase(v6("1:2:3:4::5") in t, "lookup should succeed")

    del t["1:2:3:4::/64"]
    testcase(v6("1:2:3:4::5") not in t, "lookup should fail")


do_tests(False)
do_tests(True)
